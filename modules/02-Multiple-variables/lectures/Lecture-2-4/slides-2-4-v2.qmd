---
title: "Data Analytics and Visualization"
subtitle: "2-4: Javascript and Observable"
author: "Prof. Gabe Hope"
format: 
    revealjs:
        theme: ["../../../../theme.scss"]
        html-math-method: katex
        slideNumber: true
---


# What do we use visualization for?

## **Internal:** Exploratory data analysis
I don't know anything about my data, how do I start to understand it?

#### Penguins:

```{ojs}
//| echo: false
Plot.plot({height: 300,
  marks: [ 
    Plot.dot(penguins, {x: "bill_length_mm", y: "bill_depth_mm", stroke: "species"})
  ]
})
```

## **Internal:** Model and assumption checking
I'm making assumptions about my data, are they correct?

#### Caitlin Clark model:

![](pictures/fit.png)

## **Internal:** Debugging and question answering
I have a question about my data, can I answer easily?

#### Missing data?:
![](pictures/fit.png)


## **External:** Supporting conclusions
I want to showcase a result I found

#### My own work:
![](pictures/movies.png)

## **External:** Decision making

Help users make good decisions

#### Covid dashboards:

![](pictures/dashboard.png)

## **External:** Visual storytelling
Use visualization in service of a larger story

#### NY Times:

![](pictures/story.png)

# Visualization on the Web

## **Exercise:** form groups and analyze a story

- [Segregation in U.S. Cities](https://www.washingtonpost.com/graphics/2018/national/segregation-us-cities/)
- [Fires in California](https://www.washingtonpost.com/graphics/2020/climate-environment/north-complex-fire-california-climate-change/?itid=lk_inline_manual_2)
- [Covid Simulator](https://www.washingtonpost.com/graphics/2020/world/corona-simulator/?itid=lk_inline_manual_4)
- [Family income vs college](https://www.nytimes.com/interactive/2015/05/28/upshot/you-draw-it-how-family-income-affects-childrens-college-chances.html)
- [College mobility](https://www.nytimes.com/interactive/projects/college-mobility/harvey-mudd-college)


# From ggplot to ObservablePlot

## Let's try it out!

An [observable notebook](https://observablehq.com/d/cf37ed064de497f1)

## Plot

| Purpose |`ggplot2`|`Observable Plot`|
| -------| --------- | ---------- | 
|<span class="coh hello"><u>Initialize the plot</span><br><br><br><span class="coh geom">Specify geom or mark</span><br><span class="coh data">From which dataset?</span><br><span class="coh variables">Variable mappings</span><br><span class="coh fill">Mark color</span><br><span class="coh symbol">Mark shape</span><br><span class="coh opacity">Mark opacity (constant)</span><br><span class="coh size">Mark size (constant)</span><br><br><br><span class="coh legend">Reveal legend</span><br><span class="coh facet">Facet</span><br><span class="coh axislabel">Axis labels</span><br><br><br><span class="coh grid">Add gridlines</span> | <span class="coh hello">`ggplot()`</span>&nbsp;&nbsp;` + `<br><br><br>&nbsp;&nbsp;<span class="coh geom">`geom_point`</span>`(`<span class="coh data">`penguins`</span>`,` <br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="coh variables">`aes(x = flipper_length_mm,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`y = body_mass_g,`</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="coh fill">`color = species,`</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="coh symbol">`shape = species`</span>`),`<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="coh opacity">`alpha = 0.7,`</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="coh size">`size = 4`</span><br>&nbsp;&nbsp;&nbsp;&nbsp;`) +`<br><br>&nbsp;&nbsp;<span style="color: gray;" class="coh legend"><i>`# N/A: legends revealed by default`</i></span><br>&nbsp;&nbsp;<span class="coh facet">`facet_wrap(~island)`</span>&nbsp;&nbsp;`+`<br>&nbsp;&nbsp;<span class="coh axislabel">`labs(x = "Flipper length (mm)",`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`y = "Body mass (g)")`</span><br><br>&nbsp;&nbsp;<span style="color: gray;" class="coh grid"><i>`# N/A: gridlines added by default`</i></span>| <span class="coh hello">`Plot.plot`</span>`({`<br><br>&nbsp;&nbsp;`marks: [`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="coh geom">`Plot.dot`</span>`(`<span class="coh data">`penguins`</span>`,` <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="coh variables">`{x: "flipper_length_mm",`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`y: "body_mass_g",`</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="coh fill">`fill: "species",`</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="coh symbol">`symbol: "species"`</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="coh opacity">`opacity: 0.7`</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="coh size">`r: 4`</span>`})`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`]`<br><br>&nbsp;&nbsp;<span class="coh legend">`symbol: {legend: true},`</span><br>&nbsp;&nbsp;<span class="coh facet">`facet: {data: penguins, x: "island"},`</span><br>&nbsp;&nbsp;<span class="coh axislabel">`x: {label: "Flipper length (mm)"},`</span><br>&nbsp;&nbsp;<span class="coh axislabel">`y: {label: "Body mass (g)"},`</span><br><br>&nbsp;&nbsp;<span class="coh grid">`grid: true`</span><br><br>`})`</span>




## Penguins!

```{python}
#| echo: true
import pandas as pd
import seaborn as sns
penguins = sns.load_dataset('penguins')
ojs_define(data=penguins)
```

## In Javascript

Columns format:

```{ojs}
//| echo: true
data
```


Records format:
```{ojs}
//| echo: true
penguins = transpose(data)
penguins
```

## Making a plot

```{ojs}
//| echo: true
Plot.plot({
  'marks': [
    Plot.dot(penguins, {'x': "bill_length_mm", 'y': "bill_depth_mm", 'stroke': "species"})
  ]
})
```

## Making a plot

```{ojs}
//| echo: true
//| code-line-numbers: "1"
Plot.plot({ // Dictionary (object) keys don't need to be strings
  marks: [ 
    Plot.dot(penguins, {x: "bill_length_mm", y: "bill_depth_mm", stroke: "species"})
  ]
})
```

## Making a plot

`Plot.plot` creates a new plot (like `ggplot()`). 

- Rather than adding to it, we'll pass a dictionary (Javascript object) that contains all the components of our grammar. 

```{ojs}
//| echo: true
//| code-line-numbers: "1"
Plot.plot({ height: 300,
  marks: [ 
    Plot.dot(penguins, {x: "bill_length_mm", y: "bill_depth_mm", stroke: "species"})
  ]
})
```

## Components of the grammar of graphics

**Stretching the metaphor:** The *parts of speech* for our visual language

::::: columns
::: {.column width="50%"}
- Data
- Aesthetic mappings
- Geometries
- Transforms
:::

::: {.column width="50%"}
- Scales
- Coordinate systems
- Faceting systems
- Annotations
:::
:::::

## Components: Data

Data in a tidy (records) format:

```{ojs}
//| echo: true
penguins
```

## Components: Aesthetic mappings

Here our aesthetic mapping is defined as a dictionary (object)
```{python}
#| echo: true
#| eval: false
{x: "bill_length_mm", y: "bill_depth_mm", stroke: "species"}
```

Full code

```{ojs}
//| echo: true
Plot.plot({height: 300,
  marks: [ 
    Plot.dot(penguins, {x: "bill_length_mm", y: "bill_depth_mm", stroke: "species"})
  ]
})
```

## Components: Aesthetic mappings

We can assign constant values in the same dictionary 

Full code

```{ojs}
//| echo: true
Plot.plot({height: 300,
  marks: [ 
    Plot.dot(penguins, {x: "bill_length_mm", y: "bill_depth_mm", stroke: "lightgrey"})
  ]
})
```

## Components: Geometries   

Like ggplot, our choice of geometry is defined via a function
```{python}
#| echo: true
#| eval: false
Plot.dot(...)
```
::: {style="font-size: 60%"}
*`Plot.dot` is equivalent to `geom_point`*
:::

Full code

```{ojs}
//| echo: true
Plot.plot({height: 300,
  marks: [ 
    Plot.dot(penguins, {x: "bill_length_mm", y: "bill_depth_mm", stroke: "species"})
  ]
})
```

## Layers

The geometry plus data and aesthetic mapping forms a **layer**
```{python}
#| echo: true
#| eval: false
Plot.dot(penguins, {x: "bill_length_mm", y: "bill_depth_mm", stroke: "species"})
```
::: {style="font-size: 60%"}
*`Plot.dot` is equivalent to `geom_point`*
:::

Full code

```{ojs}
//| echo: true
Plot.plot({height: 300,
  marks: [ 
    Plot.dot(penguins, {x: "bill_length_mm", y: "bill_depth_mm", stroke: "species"})
  ]
})
```

## Layers

A plot can have multiple layers (passed as a list under `marks`)

```{ojs}
//| echo: true
Plot.plot({height: 300,
  marks: [ 
    Plot.dot(penguins, {x: "bill_length_mm", y: "bill_depth_mm", stroke: "lightgrey"}),
    Plot.dot(penguins.filter((d) => d.species == 'Gentoo'), 
        {x: "bill_length_mm", y: "bill_depth_mm", stroke: "species"}
    ),
    Plot.ruleX([45]) // Equivalent of geom_vline()
  ]
})
```

## Filtering

```{ojs}
//| echo: true
penguins.filter((d) => d.species == 'Gentoo')
```

The input to the `filter` method is an *anonymous function* in javascript. It's equivalent in Python would be:

```{python}
#| eval: false
#| echo: true
lambda d: d['species'] == 'Gentoo'
```

`filter` takes all entries where the function returns `true`. 
- Like pandas' `query`

## Components: Scales   

Like ggplot, scales are shared across layers.

```{ojs}
//| echo: true
Plot.plot({height: 300,
  x: {domain: [20, 80]},     // Domain is limits in ggplot
  color: {scheme: 'Accent'}, // Scheme changes the color scheme
  marks: [ 
    Plot.dot(penguins, {x: "bill_length_mm", y: "bill_depth_mm", stroke: "species"})
  ]
})
```

## Components: Coordinate systems   

Called **projections** in observable plot (a bit more complicated)

## Components: Facets   

Facets are specified per-layer with `fx`/`fy`

```{ojs}
//| echo: true
Plot.plot({height: 300, width: 1200,
  marks: [ 
    Plot.dot(penguins,
     {x: "bill_length_mm", y: "bill_depth_mm", stroke: "species", 
     fx: "island"
     })
  ]
})
```

## Components: Facets   

Layers without a facet specified are replicated. 

```{ojs}
//| echo: true
Plot.plot({height: 300, width: 1200,
  marks: [ 
    Plot.dot(penguins, {x: "bill_length_mm", y: "bill_depth_mm", stroke: "lightgrey"}),
    Plot.dot(penguins, 
    {x: "bill_length_mm", y: "bill_depth_mm", stroke: "species", 
    fx: "island"
    })
  ]
})
```

## Components: Transforms   

Transforms create new computed aesthetic mappings and usually have the form:

```{python}
#| eval: false
#| echo: true
Plot.bin({transform options}, {aesthetic mappings})
```

```{ojs}
//| echo: true
Plot.plot({height: 300, width: 600,
  color: {scheme: 'BuRd', type: 'linear'},
  marks: [ 
    Plot.rect(penguins,
    Plot.bin({fill: "count"}, {x: "bill_length_mm", y: "bill_depth_mm"})
    )
  ]
})
```

## Components: Transforms   

The transform object defines how to compute new aesthetic mappings from the data.

```{ojs}
//| echo: true
Plot.bin({fill: "count"}, {x: "bill_length_mm", y: "bill_depth_mm"})
```


## Components: Transforms   

The hexbin transform works with the `dot` geometry.

```{ojs}
//| echo: true
Plot.plot({height: 300, width: 600,
  color: {scheme: 'BuRd', type: 'linear'},
  marks: [ 
    Plot.dot(penguins,
    Plot.hexbin({fill: "count"}, {x: "bill_length_mm", y: "bill_depth_mm"})
    )
  ]
})
```

## Components: Transforms   

Our 2-d histogram doesn't need to be defined via color.
```{ojs}
//| echo: true
Plot.plot({height: 300, width: 600,
  marks: [ 
    Plot.dot(penguins,
    Plot.hexbin({r: "count"}, {x: "bill_length_mm", y: "bill_depth_mm"})
    )
  ]
})
```

## Components: Transforms   

We can use color to group our data

::::: columns
::: {.column}
```{ojs}
//| echo: true
Plot.plot({height: 300, width: 600,
  color: {legend: true},
  marks: [ 
    Plot.hexgrid(),
    Plot.dot(penguins,
    Plot.hexbin({r: "count"}, 
    {x: "bill_length_mm", y: "bill_depth_mm", 
    stroke: 'species'})
    )
  ],
})
```
:::
::: {.column}
```{ojs}
//| echo: true
Plot.plot({height: 300, width: 600,
  color: {legend: true},
  marks: [ 
    Plot.hexgrid(),
    Plot.dot(penguins,
    Plot.hexbin({r: "count"}, 
    {x: "bill_length_mm", y: "bill_depth_mm", 
    stroke: 'island'})
    )
  ],
})
```
:::
:::::

## Components: Transforms   

We can create a 1-d histrogram by binning just the x coordinate with `binX`. The geometry `rectY` corresponds to tightly packed bars.


```{ojs}
//| echo: true
Plot.plot({height: 300, width: 600,
  marks: [ 
    Plot.rectY(penguins,
        Plot.binX({y: "count"}, {x: "bill_length_mm"})
    )
  ]
})
```

## Components: Transforms   

The `group` transform does the equivalent for categorical variables.


```{ojs}
//| echo: true
Plot.plot({height: 300, width: 600,
  color: {legend: true},
  marks: [ 
    Plot.barY(penguins,
        Plot.groupX({y: "count"}, {x: "island", fill: "species"})
    )
  ]
})
```



## Components: Transforms   

The `dodge` transform ensures that points don't overlap (here by moving up the y axis).

```{ojs}
//| echo: true
Plot.plot({height: 300, width: 600,
  marks: [ 
    Plot.dot(penguins,
        Plot.dodgeY({x: "bill_length_mm"})
    )
  ]
})
```

## Components: Transforms   

The `sort` transform sorts observations by some column. Here we'll compose it with the `dodge` transform.

```{ojs}
//| echo: true
Plot.plot({height: 300, width: 600,
  marks: [ 
    Plot.dot(penguins,
        Plot.dodgeY(Plot.sort("bill_length_mm", {x: "bill_length_mm"}))
    )
  ]
})
```

## Components: Annotations   
Annotations can be created by specifying other options like `title`

```{ojs}
//| echo: true
Plot.plot({height: 300, width: 600,
  title: "Penguins!",
  marks: [ 
    Plot.rectY(penguins,
        Plot.binX({y: "count"}, {x: "bill_length_mm"})
    )
  ]
})
```

## Components: Annotations   
An extremely important annotation is a legend. Defined per scale.
```{ojs}
//| echo: true
Plot.plot({height: 300, width: 1200,
  color: {legend: true},
  marks: [ 
    Plot.dot(penguins,
     {x: "bill_length_mm", y: "bill_depth_mm", stroke: "species"})
  ]
})
```

## Other plots

A density plot can be computed with the `density` geometry
```{ojs}
//| echo: true
Plot.plot({
  marks: [
    Plot.density(penguins, {x: "bill_length_mm", y: "bill_depth_mm",}),
    Plot.dot(penguins, {x: "bill_length_mm", y: "bill_depth_mm", stroke: "species"})
  ]
})
```



## Components: **Interactions**
`Inputs` allow for values that the user controls.

```{ojs}
//| echo: true
viewof bins = Inputs.range([0, 100], {step: 1})
```
When this values changes the plot changes!
```{ojs}
//| echo: true
Plot.plot({height: 300, width: 600,
  marks: [ 
    Plot.rectY(penguins,
        Plot.binX({y: "count", thresholds: bins}, {x: "bill_length_mm"})
    )
  ]
})
```
## Components: **Interactions**